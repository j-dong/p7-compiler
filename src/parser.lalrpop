// vim:ft=rust
use std::str::FromStr;
use ast::*;

grammar;

Ident: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s;
String: String = <s:r#""([^"\\]|\\.)*"#> => s; // TODO: process escapes
Number: i16 = <s:r"[0-9]+"> => i16::from_str(s).unwrap();

pub Program: Vec<Global> = {
    Global*,
};

pub Global: Global = {
    "global" <Ident> ";" => GlobalVariable(<>),
    <Ident> "(" <Ident*> ")" <Statement> => Function(<>),
};

pub Statement: Box<Statement> = {
    <Expr> ";" => ExprStatement(<>),
    "{" <Statement*> "}" => BlockStatement(<>),
    "if" "(" <Expr> ")" <Statement> => IfStatement(<>),
    "while" "(" <Expr> ")" <Statement> => WhileStatement(<>),
    "return" <Expr?> ";" => ReturnStatement(<>),
    "break" ";" => BreakStatement,
    "continue" ";" => ContinueStatement,
    "print" <String> => PrintStatement,
};

pub Expr: Box<Expr> = {
    Assignment,
};

pub Assignment: Box<Expr> = {
    <Ident> "=" <Assignment> => AssignExpr(<>),
    Sum,
};

pub Sum: Box<Expr> = {
    <Sum> "+" <Term> => Plus(<>),
    <Sum> "-" <Term> => Minus(<>),
    Term,
};

pub Term: Box<Expr> = {
    "(" <Assignment> ")",
    Ident,
    Number,
};
